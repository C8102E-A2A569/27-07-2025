// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0--rc1
// source: archive.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ArchiveZipService_CreateTask_FullMethodName      = "/archive.ArchiveZipService/CreateTask"
	ArchiveZipService_AddFiles_FullMethodName        = "/archive.ArchiveZipService/AddFiles"
	ArchiveZipService_GetTaskStatus_FullMethodName   = "/archive.ArchiveZipService/GetTaskStatus"
	ArchiveZipService_DownloadArchive_FullMethodName = "/archive.ArchiveZipService/DownloadArchive"
)

// ArchiveZipServiceClient is the client API for ArchiveZipService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArchiveZipServiceClient interface {
	CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error)
	AddFiles(ctx context.Context, in *AddFilesRequest, opts ...grpc.CallOption) (*AddFilesResponse, error)
	GetTaskStatus(ctx context.Context, in *GetTaskStatusRequest, opts ...grpc.CallOption) (*GetTaskStatusResponse, error)
	DownloadArchive(ctx context.Context, in *DownloadArchiveRequest, opts ...grpc.CallOption) (*DownloadArchiveResponse, error)
}

type archiveZipServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArchiveZipServiceClient(cc grpc.ClientConnInterface) ArchiveZipServiceClient {
	return &archiveZipServiceClient{cc}
}

func (c *archiveZipServiceClient) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTaskResponse)
	err := c.cc.Invoke(ctx, ArchiveZipService_CreateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveZipServiceClient) AddFiles(ctx context.Context, in *AddFilesRequest, opts ...grpc.CallOption) (*AddFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddFilesResponse)
	err := c.cc.Invoke(ctx, ArchiveZipService_AddFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveZipServiceClient) GetTaskStatus(ctx context.Context, in *GetTaskStatusRequest, opts ...grpc.CallOption) (*GetTaskStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTaskStatusResponse)
	err := c.cc.Invoke(ctx, ArchiveZipService_GetTaskStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveZipServiceClient) DownloadArchive(ctx context.Context, in *DownloadArchiveRequest, opts ...grpc.CallOption) (*DownloadArchiveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadArchiveResponse)
	err := c.cc.Invoke(ctx, ArchiveZipService_DownloadArchive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArchiveZipServiceServer is the server API for ArchiveZipService service.
// All implementations must embed UnimplementedArchiveZipServiceServer
// for forward compatibility.
type ArchiveZipServiceServer interface {
	CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error)
	AddFiles(context.Context, *AddFilesRequest) (*AddFilesResponse, error)
	GetTaskStatus(context.Context, *GetTaskStatusRequest) (*GetTaskStatusResponse, error)
	DownloadArchive(context.Context, *DownloadArchiveRequest) (*DownloadArchiveResponse, error)
	mustEmbedUnimplementedArchiveZipServiceServer()
}

// UnimplementedArchiveZipServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedArchiveZipServiceServer struct{}

func (UnimplementedArchiveZipServiceServer) CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedArchiveZipServiceServer) AddFiles(context.Context, *AddFilesRequest) (*AddFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFiles not implemented")
}
func (UnimplementedArchiveZipServiceServer) GetTaskStatus(context.Context, *GetTaskStatusRequest) (*GetTaskStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskStatus not implemented")
}
func (UnimplementedArchiveZipServiceServer) DownloadArchive(context.Context, *DownloadArchiveRequest) (*DownloadArchiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadArchive not implemented")
}
func (UnimplementedArchiveZipServiceServer) mustEmbedUnimplementedArchiveZipServiceServer() {}
func (UnimplementedArchiveZipServiceServer) testEmbeddedByValue()                           {}

// UnsafeArchiveZipServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArchiveZipServiceServer will
// result in compilation errors.
type UnsafeArchiveZipServiceServer interface {
	mustEmbedUnimplementedArchiveZipServiceServer()
}

func RegisterArchiveZipServiceServer(s grpc.ServiceRegistrar, srv ArchiveZipServiceServer) {
	// If the following call pancis, it indicates UnimplementedArchiveZipServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ArchiveZipService_ServiceDesc, srv)
}

func _ArchiveZipService_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveZipServiceServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArchiveZipService_CreateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveZipServiceServer).CreateTask(ctx, req.(*CreateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchiveZipService_AddFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveZipServiceServer).AddFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArchiveZipService_AddFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveZipServiceServer).AddFiles(ctx, req.(*AddFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchiveZipService_GetTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveZipServiceServer).GetTaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArchiveZipService_GetTaskStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveZipServiceServer).GetTaskStatus(ctx, req.(*GetTaskStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchiveZipService_DownloadArchive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadArchiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveZipServiceServer).DownloadArchive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArchiveZipService_DownloadArchive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveZipServiceServer).DownloadArchive(ctx, req.(*DownloadArchiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ArchiveZipService_ServiceDesc is the grpc.ServiceDesc for ArchiveZipService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArchiveZipService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "archive.ArchiveZipService",
	HandlerType: (*ArchiveZipServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTask",
			Handler:    _ArchiveZipService_CreateTask_Handler,
		},
		{
			MethodName: "AddFiles",
			Handler:    _ArchiveZipService_AddFiles_Handler,
		},
		{
			MethodName: "GetTaskStatus",
			Handler:    _ArchiveZipService_GetTaskStatus_Handler,
		},
		{
			MethodName: "DownloadArchive",
			Handler:    _ArchiveZipService_DownloadArchive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "archive.proto",
}
